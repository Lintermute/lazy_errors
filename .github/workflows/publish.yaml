# When a tag matching a certain pattern is pushed,
# do a quick validation of the software at that point in the git history,
# import the version number from the tag name and write it to Cargo.toml,
# publish the crate to crates.io, and create a GitHub release.
#
# We're only doing a quick validation in this pipeline.
# In the past we've called the `validate.yaml` from this pipeline.
# However, this introduces a “race condition” with the rest of the
# Rust ecosystem: `validate.yaml` checks several “moving targets”,
# such as whether `Cargo.lock` is up-to-date. Thus, any commit
# that had already passed the `validate.yaml` check may fail it
# if it is checked again at some later point in time, for example
# when a new version of any (transitive) dependency gets released.
# Since we've validated each commit on the main branch,
# all commits on the main branch are good to release per se.
# If we rejected such a release just because we're a few minutes
# “too late” (whatever that means), we would have to publish
# that version manually or we would have to delete the git tag.
# Even if we noticed before creating the tag, this would require
# us to create a “hotfix” branch for completely artificial reasons.

name: Publish

on:
  push:
    tags:
      - 'v*.*.*'

jobs:

  validate:
    timeout-minutes: 60
    runs-on: ${{ matrix.system }}

    strategy:
      matrix:
        system: [ ubuntu-latest, windows-latest, macos-latest ]

    steps:

    # On some agents there are linter errors due to changed line endings.
    - name: Configure Git
      run: git config --global core.autocrlf false

    - uses: actions/checkout@v4

    - name: Install stable Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-hack
      uses: taiki-e/install-action@v2
      with:
        tool: cargo-hack

    # FIXME: `xtask ci` may run `cargo build`, overwriting its own binary.
    # FIXME: This is not possible on Windows, so install it before running it.
    - name: Run `xtask ci all --skip-moving-targets`
      run: |
        cargo install --path xtask
        xtask ci all --skip-moving-targets

  publish:
    needs: validate
    permissions:
      contents: write
    timeout-minutes: 15
    runs-on: ubuntu-latest

    steps:

    # Fetch all tags since the earliest release that we (still) want to
    # include in the changelog generation process.
    # Fetch the history of the current HEAD since that date as well,
    # so `git tag --merged` shows which tags are actually part of HEAD.
    # TODO: Use `--shallow-since $DATE` when it's not buggy anymore.
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # All tags are here but the one that triggered this workflow
    # will not be found by `git describe` yet. See:
    # https://github.com/actions/checkout/issues/290
    - name: Fetch missing tags
      run: git fetch --force --tags

    - name: Install stable Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-edit
      uses: taiki-e/install-action@v2
      with:
        tool: cargo-edit

    # Import the version number from git and write it to Cargo.{lock,toml}.
    #
    # FYI: https://github.com/rust-lang/cargo/issues/6583
    # TODO: Maybe move version setting from xtask into build.rs.
    - name: Set version number
      run: >
        cargo xtask version
        import git-describe --accept=major-minor-patch

    # Create a temporary commit to allow running `cargo publish`
    # without having to use `--allow-dirty` (may be too permissive).
    - name: Whitelist changed files
      run: |
        git config --global user.email "runner@github.com"
        git config --global user.name "GitHub, Runner"
        git commit -m 'Set version number' Cargo.lock '*/Cargo.toml'

    - name: Publish crate
      run: >
        cargo publish
        --package lazy_errors
      env:
        CARGO_REGISTRY_TOKEN: "${{ secrets.CRATES_IO_API_TOKEN }}"
