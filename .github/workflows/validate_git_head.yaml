# Runs the CI quality gate: compilation, linting, testing, dependency checking,
# and so on. Parallel implementation of the steps defined in the `xtask` crate.

name: Validate Git HEAD

on:

  push:
    branches:
      - '**'

  # Ensure we find out if the build breaks, e.g. due to new clippy lints.
  schedule:
    #        ┌───────────── minute (0 - 59)
    #        │ ┌───────────── hour (0 - 23)
    #        │ │ ┌───────────── day of the month (1 - 31)
    #        │ │ │ ┌───────────── month (1 - 12 or JAN-DEC)
    #        │ │ │ │ ┌───────────── day of the week (0 - 6 or SUN-SAT)
    #        │ │ │ │ │
    #        │ │ │ │ │
    #        │ │ │ │ │
    - cron: '0 0 * * *'

jobs:

  # Determine the branch names on which to run the actual jobs below.
  init:
    timeout-minutes: 1
    runs-on: ubuntu-latest

    outputs:
      branches: ${{ steps.set_branches.outputs.branches }}

    steps:
    - id: set_branches
      name: "Determine branches to check"
      run: |
        case "${{ github.event_name }}" in
            "push")     branches="[ \"$GITHUB_REF_NAME\" ]" ;;
            "schedule") branches="[ \"dev/0.1\", \"pub/0.1\" ]" ;;
            *)
                echo "Unknown event: ${{ github.event_name }}" >&2
                exit 1
        esac
        echo "branches=$branches" >> $GITHUB_OUTPUT


  rustfmt:
    needs: init
    timeout-minutes: 5

    # Results should be the same on all systems.
    runs-on: ubuntu-latest

    strategy:
      matrix:
        branch: ${{ fromJson(needs.init.outputs.branches) }}

    steps:

    # Avoid linter errors due to changed line endings
    - run: git config --global core.autocrlf false

    - uses: actions/checkout@v4
      with:
        ref: ${{ matrix.branch }}

    - name: Install nightly Rust toolchain with rustfmt
      uses: dtolnay/rust-toolchain@nightly
      with:
        components: rustfmt

    # Let's see if HEAD works with a (semver) up-to-date set of dependencies.
    - name: Update Cargo.lock
      run: cargo update

    - name: rustfmt
      run: cargo xtask ci rustfmt


  build:
    name: build & test
    needs: init
    timeout-minutes: 15
    runs-on: ${{ matrix.system }}

    strategy:
      matrix:
        system: [ ubuntu-latest, windows-latest, macos-latest ]
        branch: ${{ fromJson(needs.init.outputs.branches) }}
        profile: [ dev, release ]

    steps:

    - uses: actions/checkout@v4
      with:
        ref: ${{ matrix.branch }}

    - name: Install stable Rust toolchain with clippy
      uses: dtolnay/rust-toolchain@stable
      with:
        components: clippy

    - name: Install cargo-hack
      uses: taiki-e/install-action@v2
      with:
        tool: cargo-hack

    # Let's see if HEAD works with a (semver) up-to-date set of dependencies.
    - name: Update Cargo.lock
      run: cargo update

    - name: Run clippy
      run: cargo xtask ci clippy --profile ${{ matrix.profile }}

    - name: Run tests
      run: cargo xtask ci test --profile ${{ matrix.profile }}

    - name: Build artifacts
      run: cargo xtask ci build --profile ${{ matrix.profile }}


  coverage:
    needs: init
    timeout-minutes: 15
    runs-on: ${{ matrix.system }}

    strategy:
      matrix:
        system: [ ubuntu-latest ]
        branch: ${{ fromJson(needs.init.outputs.branches) }}
        profile: [ dev, release ]

    steps:

    - uses: actions/checkout@v4
      with:
        ref: ${{ matrix.branch }}

    # FIXME: Remove nightly once tarpaulin can run doctests on stable again
    - name: Install nightly Rust toolchain
      uses: dtolnay/rust-toolchain@nightly

    - name: Install stable Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-tarpaulin
      uses: taiki-e/install-action@v2
      with:
        tool: cargo-tarpaulin

    # Let's see if HEAD works with a (semver) up-to-date set of dependencies.
    - name: Update Cargo.lock
      run: cargo update

    - name: Check coverage
      run: cargo xtask ci tarpaulin --profile ${{ matrix.profile }}


  miri:
    needs: init
    timeout-minutes: 15
    runs-on: ${{ matrix.system }}

    strategy:
      matrix:
        system: [ ubuntu-latest, windows-latest, macos-latest ]
        branch: ${{ fromJson(needs.init.outputs.branches) }}

    steps:

    - uses: actions/checkout@v4
      with:
        ref: ${{ matrix.branch }}

    - name: Install nightly Rust toolchain with miri
      uses: dtolnay/rust-toolchain@nightly
      with:
        components: miri

    - name: Install cargo-hack
      uses: taiki-e/install-action@v2
      with:
        tool: cargo-hack

    # Let's see if HEAD works with a (semver) up-to-date set of dependencies.
    - name: Update Cargo.lock
      run: cargo update

    # FIXME: `xtask ci miri` runs `cargo clean`, deleting its own binary.
    # FIXME: This is not possible on Windows, so install it before running it.
    - name: Install xtask
      run: cargo install --path xtask

    - name: Run MIRI tests
      run: xtask ci miri


  docs:
    needs: init
    timeout-minutes: 5
    runs-on: ${{ matrix.system }}

    strategy:
      matrix:
        system: [ ubuntu-latest, windows-latest, macos-latest ]
        branch: ${{ fromJson(needs.init.outputs.branches) }}
        profile: [ dev, release ]

    steps:

    - uses: actions/checkout@v4
      with:
        ref: ${{ matrix.branch }}

    - name: Install stable Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-hack
      uses: taiki-e/install-action@v2
      with:
        tool: cargo-hack

    # Let's see if HEAD works with a (semver) up-to-date set of dependencies.
    - name: Update Cargo.lock
      run: cargo update

    - name: Build docs
      run: cargo xtask ci docs --profile ${{ matrix.profile }}


  deps:
    needs: init
    timeout-minutes: 5

    # Results should be the same on all systems.
    runs-on: ubuntu-latest

    strategy:
      matrix:
        branch: ${{ fromJson(needs.init.outputs.branches) }}

    steps:

    - uses: actions/checkout@v4
      with:
        ref: ${{ matrix.branch }}

    - name: Install stable Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-upgrades
      uses: taiki-e/install-action@v2
      with:
        tool: cargo-upgrades

    # Let's see if HEAD works with a (semver) up-to-date set of dependencies.
    # The Cargo.lock of library crates is not published / used by other people.
    # TODO: If we're a binary crate, FAIL if we're using outdated dependencies.
    - name: Update Cargo.lock
      run: cargo update

    - name: Check dependencies
      run: cargo xtask ci deps
